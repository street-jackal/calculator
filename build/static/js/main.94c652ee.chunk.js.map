{"version":3,"sources":["reportWebVitals.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Calculator","props","state","input","output","currentChar","hasDecimal","handleInput","bind","e","target","value","this","setState","test","slice","className","id","onClick","React","Component","InputScreen","OutputScreen","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.94c652ee.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\n// evaluate the input string. trims off anything other than a number at end of string\nfunction evaluate(input) {\n  if (input !== 0) {\n    if (/[^0-9]/.test(input.slice(-1))) {\n      input = input.slice(0, -1);\n    }\n    return Function('return ' + input)();\n  }\n  return 0;\n}\n\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: \"0\",\n      output: \"0\",\n      currentChar: \"\",\n      hasDecimal: false\n    };\n    this.handleInput = this.handleInput.bind(this);\n  }\n\n  // main method to handle all the varius input cases\n  handleInput(e) {\n    // run evaluate if enter key is pressed, set output display to show formula\n    if (e.target.value === \"=\") {\n      this.setState({ output: this.state.input, input: evaluate(this.state.input) });\n    }\n    // clear input, output, currentChar if AC key is pressed\n    else if (e.target.value === \"clear\") {\n      this.setState({ input: 0, output: 0, currentChar: \"\" });\n    }\n    /* \n    if input screen is clear, allow only numbers or '-' or '.' \n    clear the initial zero before adding matching input\n    */\n    else if (this.state.input == 0) {\n      if (/[0-9]|-|\\./.test(e.target.value)) {\n        this.setState({\n          input: e.target.value,\n          currentChar: e.target.value,\n          hasDecimal: e.target.value === '.' ? true : false\n        });\n      }\n    }\n    /*\n    if input screen is not zero, and key pressed is an operator,\n    and currentChar is not also an operator, append operator to end of input \n    */\n    else if (/\\*|\\/|\\+|-/.test(e.target.value)) {\n      if (/[0-9]/.test(this.state.currentChar)) {\n        this.setState({\n          input: this.state.input + e.target.value,\n          currentChar: e.target.value,\n          hasDecimal: false\n        });\n      }\n      // allow '-' after an operator other than itself\n      else if(this.state.currentChar !== '-' && e.target.value === '-'){\n        this.setState({\n          input: this.state.input + e.target.value,\n          currentChar: e.target.value,\n          hasDecimal: false\n        });\n      }\n      // if last char is '-' and a '+' is entered, replace it\n      else if(this.state.currentChar === '-' && e.target.value === '+'){\n        this.setState({\n          input: this.state.input.slice(0,-2) + e.target.value,\n          currentChar: e.target.value,\n          hasDecimal: false\n        });\n      }\n      // if last char is an operator, replace with new operator if one is entered\n      else if(/[^0-9]/.test(this.state.currentChar)){\n        this.setState({\n          input: this.state.input.slice(0,-1) + e.target.value,\n          currentChar: e.target.value\n        });\n      }\n    }\n    // make sure there's only one decimal allowed\n    else if (e.target.value === '.') {\n      if (!this.state.hasDecimal) {\n        this.setState({\n          input: this.state.input + '.',\n          currentChar: '.',\n          hasDecimal: true\n        });\n      }\n    }\n    else {\n      this.setState({\n        input: this.state.input + e.target.value,\n        currentChar: e.target.value\n      });\n    }\n  }\n\n\n  render() {\n    return (\n      <div className=\"calcBackground\" >\n        <OutputScreen className=\"output\" value={this.state.output} />\n        <InputScreen className=\"input\" value={this.state.input} />\n        <div id=\"buttonBackground\">\n          <button id=\"clear\" value=\"clear\" onClick={this.handleInput}>AC</button>\n          <button id=\"divide\" value=\"/\" className=\"operator\" onClick={this.handleInput}>/</button>\n          <button id=\"multiply\" value=\"*\" className=\"operator\" onClick={this.handleInput}>*</button>\n          <button id=\"subtract\" value=\"-\" className=\"operator\" onClick={this.handleInput}>-</button>\n          <button id=\"seven\" value=\"7\" onClick={this.handleInput}>7</button>\n          <button id=\"eight\" value=\"8\" onClick={this.handleInput}>8</button>\n          <button id=\"nine\" value=\"9\" onClick={this.handleInput}>9</button>\n          <button id=\"four\" value=\"4\" onClick={this.handleInput}>4</button>\n          <button id=\"five\" value=\"5\" onClick={this.handleInput}>5</button>\n          <button id=\"six\" value=\"6\" onClick={this.handleInput}>6</button>\n          <button id=\"add\" value=\"+\" className=\"operator\" onClick={this.handleInput}>+</button>\n          <button id=\"one\" value=\"1\" onClick={this.handleInput}>1</button>\n          <button id=\"two\" value=\"2\" onClick={this.handleInput}>2</button>\n          <button id=\"three\" value=\"3\" onClick={this.handleInput}>3</button>\n          <button id=\"zero\" value=\"0\" onClick={this.handleInput}>0</button>\n          <button id=\"decimal\" value=\".\" onClick={this.handleInput}>.</button>\n          <button id=\"equals\" value=\"=\" onClick={this.handleInput}>=</button>\n        </div>\n      </div>\n    )\n  }\n\n}\n\nclass InputScreen extends React.Component {\n  render() {\n    return (\n      <div id=\"display\" className={this.props.className} value={this.props.value}>{this.props.value}</div>\n    );\n  }\n}\n\nclass OutputScreen extends React.Component {\n  render() {\n    return (\n      <div className={this.props.className} value={this.props.value}>{this.props.value}</div>\n    );\n  }\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Calculator />\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}